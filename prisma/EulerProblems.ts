module.exports = [
  {
    function: `function sumOfMultiples(number: number): number {\n
      let sum = 0;\n
      for (let i = 0; i < number; i++) {\n
        if (i % 3 === 0 || i % 5 === 0) {\n
          sum += i;\n
        }\n
      }\n
      return sum;\n
    }\n`,
    comment: `function that returns the sum of all multiples of 3 or 5 below the given number`,
    number: 1,
    difficulty: 5,
    statement: `If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n
    Find the sum of all the multiples of 3 or 5 below 1000.\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=1',
    title: 'Multiples of 3 or 5'
  },
  {
    function: `function sumEvenFibonacci(num: number): number {\n
      let sum: number = 0;\n
      let fibonacci: number[] = [1, 2];\n
      while (fibonacci[fibonacci.length - 1] < num) {\n
          fibonacci.push(fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]);\n
      }\n
      for (let i: number = 0; i < fibonacci.length; i++) {\n
          if (fibonacci[i] % 2 === 0) {\n
              sum += fibonacci[i];\n
          }\n
      }\n
      return sum;\n
    }\n`,
    comment: `function that returns the sum of all even fibonacci numbers below a given number`,
    number: 2,
    difficulty: 5,
    statement: `Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=2',
    title: 'Even Fibonacci numbers'
  },
  {
    function: `function largestPrimeFactor(num: number): number {\n
      let largestPrime: number = 0;\n
      let i: number = 2;\n
      while (i <= num) {\n
        if (num % i === 0) {\n
          largestPrime = i;\n
          num = num / i;\n
        } else {\n
          i++;\n
        }\n
      }\n
      return largestPrime;\n
    }\n`,
    comment: `function that finds the largest prime factor of a given number`,
    number: 3,
    difficulty: 5,
    statement: `The prime factors of 13195 are 5, 7, 13 and 29.\n
    What is the largest prime factor of the number 600851475143 ?\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=3',
    title: 'Largest prime factor'
  },
  {
    function: `export default function largestPalindromeProduct(n) {\n
      // declare variables\n
      var largestPalindrome = 0;\n
      var largestProduct = 0;\n
      // loop through all numbers of n digits\n
      for (var i = 10 ** (n - 1); i < 10 ** n; i++) {\n
          for (var j = 10 ** (n - 1); j < 10 ** n; j++) {\n
              // if the product of i and j is a palindrome\n
              if (isPalindrome(i * j) && i * j > largestPalindrome) {\n
                  // set largest palindrome to product\n
                  largestPalindrome = i * j;\n
                  // set largest product to i and j\n
                  largestProduct = i * j;\n
              }\n
          }\n
      }\n
      // return largest palindrome product\n
      return largestProduct;\n
    }\n
    \n
    // function to check if a number is a palindrome\n
    function isPalindrome(num: number) : boolean {\n
      // convert the number to a string\n
      let numStr = num.toString();\n
      // iterate through the string\n
      for (let i = 0; i < numStr.length; i++) {\n
          // check if the first and last characters are the same\n
          if (numStr[i] !== numStr[numStr.length - 1 - i]) {\n
              // return false\n
              return false;\n
          }\n
      }\n
      // return true\n
      return true;\n
    }\n`,
    comment: `a function that returns the largest palindrome product of two numbers of n digits`,
    number: 4,
    difficulty: 5,
    statement: `A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.\n
    Find the largest palindrome made from the product of two 3-digit numbers.\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=4',
    title: 'Largest palindrome product'
  },
  {
    function: `smallestMultiple(n: number) : number {\n
      let i = n;\n
      while (true) {\n
          let isDivisible = true;\n
          for (let j = 1; j <= n; j++) {\n
              if (i % j !== 0) {\n
                  isDivisible = false;\n
                  break;\n
              }\n
          }\n
          if (isDivisible) {\n
              return i;\n
          }\n
          i++;\n
      }\n
    }\n`,
    comment: `function that returns the smallest number that is evenly divisible by all numbers from 1 to n`,
    number: 5,
    difficulty: 5,
    statement: `2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=5',
    title: 'Smallest multiple'
  },
  {
    function: `function sumSquareDifference(n: number): number {\n
      let sumOfSquares = 0;\n
      let squareOfSums = 0;\n
      for (let i = 1; i <= n; i++) {\n
          sumOfSquares += Math.pow(i, 2);\n
          squareOfSums += i;\n
      }\n
      squareOfSums = Math.pow(squareOfSums, 2);\n
      return squareOfSums - sumOfSquares;\n
    }`,
    comment: `function that finds the difference between the sum of the squares of the first n natural numbers and the square of the sum of the first n natural numbers`,
    number: 6,
    difficulty: 5,
    statement: `The sum of the squares of the first ten natural numbers is,\n
    $$1^2 + 2^2 + ... + 10^2 = 385$$\n
    The square of the sum of the first ten natural numbers is,\n
    $$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$\n
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.\n
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=6',
    title: 'Sum square difference'
  },
  {
    function: `// function that returns the nth prime number\n
    function nthPrime(n:number):number {\n
      let primes = [2];\n
      let i = 3;\n
      while (primes.length < n) {\n
          if (isPrime(i)) {\n
              primes.push(i);\n
          }\n
          i += 2;\n
      }\n
      return primes[primes.length - 1];\n
    }\n
    \n
    // function that determines if a number is prime\n
    \n
    function isPrime(n:number):boolean {\n
      for (let i = 2; i < n; i++) {\n
          if (n % i === 0) {\n
              return false;\n
          }\n
      }\n
      return true;\n
    }\n`,
    comment: `function that finds the nth prime number`,
    number: 7,
    difficulty: 5,
    statement: `By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n
    What is the 10 001st prime number?\n`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=7',
    title: '10001st prime'
  }
];

// export {}