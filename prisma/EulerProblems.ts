module.exports = [
  {
    function: `function sumOfMultiples(number: number): number {
      let sum = 0;
      for (let i = 0; i < number; i++) {
        if (i % 3 === 0 || i % 5 === 0) {
          sum += i;
        }
      }
      return sum;
    }`,
    comment: `function that returns the sum of all multiples of 3 or 5 below the given number`,
    number: 1,
    difficulty: 5,
    statement: `If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=1',
    title: 'Multiples of 3 or 5'
  },
  {
    function: `function sumEvenFibonacci(num: number): number {
    let sum: number = 0;
    let fibonacci: number[] = [1, 2];
    while (fibonacci[fibonacci.length - 1] < num) {
        fibonacci.push(fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]);
    }
    for (let i: number = 0; i < fibonacci.length; i++) {
        if (fibonacci[i] % 2 === 0) {
            sum += fibonacci[i];
        }
    }
    return sum;
    }`,
    comment: `function that returns the sum of all even fibonacci numbers below a given number`,
    number: 2,
    difficulty: 5,
    statement: `Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=2',
    title: 'Even Fibonacci numbers'
  },
  {
    function: `function largestPrimeFactor(num: number): number {
      let largestPrime: number = 0;
      let i: number = 2;
      while (i <= num) {
        if (num % i === 0) {
          largestPrime = i;
          num = num / i;
        } else {
          i++;
        }
      }
      return largestPrime;
    }`,
    comment: `function that finds the largest prime factor of a given number`,
    number: 3,
    statement: `The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=3',
    title: 'Largest prime factor'
  },
  {
    function: `export default function largestPalindromeProduct(n) {
      // declare variables
      var largestPalindrome = 0;
      var largestProduct = 0;
      // loop through all numbers of n digits
      for (var i = 10 ** (n - 1); i < 10 ** n; i++) {
          for (var j = 10 ** (n - 1); j < 10 ** n; j++) {
              // if the product of i and j is a palindrome
              if (isPalindrome(i * j) && i * j > largestPalindrome) {
                  // set largest palindrome to product
                  largestPalindrome = i * j;
                  // set largest product to i and j
                  largestProduct = i * j;
              }
          }
      }
      // return largest palindrome product
      return largestProduct;
    }
    
    // function to check if a number is a palindrome
    function isPalindrome(num: number) : boolean {
      // convert the number to a string
      let numStr = num.toString();
      // iterate through the string
      for (let i = 0; i < numStr.length; i++) {
          // check if the first and last characters are the same
          if (numStr[i] !== numStr[numStr.length - 1 - i]) {
              // return false
              return false;
          }
      }
      // return true
      return true;
    }`,
    comment: `a function that returns the largest palindrome product of two numbers of n digits`,
    number: 4,
    difficulty: 5,
    statement: `A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
    Find the largest palindrome made from the product of two 3-digit numbers.`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=4',
    title: 'Largest palindrome product'
  },
  {
    function: `smallestMultiple(n: number) : number {
        let i = n;
        while (true) {
            let isDivisible = true;
            for (let j = 1; j <= n; j++) {
                if (i % j !== 0) {
                    isDivisible = false;
                    break;
                }
            }
            if (isDivisible) {
                return i;
            }
            i++;
        }
    }`,
    comment: `function that returns the smallest number that is evenly divisible by all numbers from 1 to n`,
    number: 5,
    difficulty: 5,
    statement: `2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=5',
    title: 'Smallest multiple'
  },
  {
    function: `function sumSquareDifference(n: number): number {
        let sumOfSquares = 0;
        let squareOfSums = 0;
        for (let i = 1; i <= n; i++) {
            sumOfSquares += Math.pow(i, 2);
            squareOfSums += i;
        }
        squareOfSums = Math.pow(squareOfSums, 2);
        return squareOfSums - sumOfSquares;
    }`,
    comment: `function that finds the difference between the sum of the squares of the first n natural numbers and the square of the sum of the first n natural numbers`,
    number: 6,
    difficulty: 5,
    statement: `The sum of the squares of the first ten natural numbers is,
    $$1^2 + 2^2 + ... + 10^2 = 385$$
    The square of the sum of the first ten natural numbers is,
    $$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=6',
    title: 'Sum square difference'
  },
  {
    function: `// function that returns the nth prime number
    function nthPrime(n:number):number {
      let primes = [2];
      let i = 3;
      while (primes.length < n) {
          if (isPrime(i)) {
              primes.push(i);
          }
          i += 2;
      }
      return primes[primes.length - 1];
    }
    
    // function that determines if a number is prime
    
    function isPrime(n:number):boolean {
      for (let i = 2; i < n; i++) {
          if (n % i === 0) {
              return false;
          }
      }
      return true;
    }`,
    comment: `function that finds the nth prime number`,
    number: 7,
    difficulty: 5,
    statement: `By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10 001st prime number?`,
    thoughts: 'no thoughts currently',
    link: 'https://projecteuler.net/problem=7',
    title: '10001st prime'
  }
];

export {}