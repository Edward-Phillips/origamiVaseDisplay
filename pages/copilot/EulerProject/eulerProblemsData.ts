// Local copy of Euler Problems data (migrated from prisma/EulerProblems.ts)
// Export as a typed array for use in pages and API routes without Prisma

export type EulerProblem = {
  function: string;
  comment: string;
  number: number;
  difficulty: number;
  statement: string;
  thoughts: string;
  link: string;
  title: string;
};

const eulerProblemsData: EulerProblem[] = [
  {
    function: `function sumOfMultiples(number: number): number {\n
      let sum = 0;\n
      for (let i = 0; i < number; i++) {\n
        if (i % 3 === 0 || i % 5 === 0) {\n
          sum += i;\n
        }\n
      }\n
      return sum;\n
    }\n`,
    comment: `function that returns the sum of all multiples of 3 or 5 below the given number`,
    number: 1,
    difficulty: 5,
    statement: `If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n
    Find the sum of all the multiples of 3 or 5 below 1000.\n`,
    thoughts: 'This is one that I had been able to solve myself without too much difficulty, I think there is likely a lower O(n) solution to this problem. I did not instruct copilot to find the lowers O(n) solution, so fair enough.',
    link: 'https://projecteuler.net/problem=1',
    title: 'Multiples of 3 or 5'
  },
  {
    function: `function sumEvenFibonacci(num: number): number {\n
      let sum: number = 0;\n
      let fibonacci: number[] = [1, 2];\n
      while (fibonacci[fibonacci.length - 1] < num) {\n
          fibonacci.push(fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]);\n
      }\n
      for (let i: number = 0; i < fibonacci.length; i++) {\n
          if (fibonacci[i] % 2 === 0) {\n
              sum += fibonacci[i];\n
          }\n
      }\n
      return sum;\n
    }\n`,
    comment: `function that returns the sum of all even fibonacci numbers below a given number`,
    number: 2,
    difficulty: 5,
    statement: `Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n`,
    thoughts: `I had previously solved this one myself and its interesting to see how copilot's solution differs, using a while loop to get the numbers and then using a for loop to get the even numbers.`,
    link: 'https://projecteuler.net/problem=2',
    title: 'Even Fibonacci numbers'
  },
  {
    function: `function largestPrimeFactor(num: number): number {\n
      let largestPrime: number = 0;\n
      let i: number = 2;\n
      while (i <= num) {\n
        if (num % i === 0) {\n
          largestPrime = i;\n
          num = num / i;\n
        } else {\n
          i++;\n
        }\n
      }\n
      return largestPrime;\n
    }\n`,
    comment: `function that finds the largest prime factor of a given number`,
    number: 3,
    difficulty: 5,
    statement: `The prime factors of 13195 are 5, 7, 13 and 29.\n
    What is the largest prime factor of the number 600851475143 ?\n`,
    thoughts: 'This is the last one I had solved myself before copilot was a thing, another while loop from copilot, but it does the job.',
    link: 'https://projecteuler.net/problem=3',
    title: 'Largest prime factor'
  },
  {
    function: `export default function largestPalindromeProduct(n) {\n
      // declare variables\n
      var largestPalindrome = 0;\n
      var largestProduct = 0;\n
      // loop through all numbers of n digits\n
      for (var i = 10 ** (n - 1); i < 10 ** n; i++) {\n
          for (var j = 10 ** (n - 1); j < 10 ** n; j++) {\n
              // if the product of i and j is a palindrome\n
              if (isPalindrome(i * j) && i * j > largestPalindrome) {\n
                  // set largest palindrome to product\n
                  largestPalindrome = i * j;\n
                  // set largest product to i and j\n
                  largestProduct = i * j;\n
              }\n
          }\n
      }\n
      // return largest palindrome product\n
      return largestProduct;\n
    }\n
    \n
    // function to check if a number is a palindrome\n
    function isPalindrome(num: number) : boolean {\n
      // convert the number to a string\n
      let numStr = num.toString();\n
      // iterate through the string\n
      for (let i = 0; i < numStr.length; i++) {\n
          // check if the first and last characters are the same\n
          if (numStr[i] !== numStr[numStr.length - 1 - i]) {\n
              // return false\n
              return false;\n
          }\n
      }\n
      // return true\n
      return true;\n
    }\n`,
    comment: `a function that returns the largest palindrome product of two numbers of n digits`,
    number: 4,
    difficulty: 5,
    statement: `A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n
    Find the largest palindrome made from the product of two 3-digit numbers.\n`,
    thoughts: `When I first came across copilot I had no coding experience and hit a wall and eventually gave up. So this is where copilot's achievements begin to outstrip my own, though looking at the problem now it doesn't seem like it would be the same challenge as when I first approached it.`,
    link: 'https://projecteuler.net/problem=4',
    title: 'Largest palindrome product'
  },
  {
    function: `smallestMultiple(n: number) : number {\n
      let i = n;\n
      while (true) {\n
          let isDivisible = true;\n
          for (let j = 1; j <= n; j++) {\n
              if (i % j !== 0) {\n
                  isDivisible = false;\n
                  break;\n
              }\n
          }\n
          if (isDivisible) {\n
              return i;\n
          }\n
          i++;\n
      }\n
    }\n`,
    comment: `function that returns the smallest number that is evenly divisible by all numbers from 1 to n`,
    number: 5,
    difficulty: 5,
    statement: `2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n`,
    thoughts: `This is a fun problem, I wonder if there's a lower complexity solution to this.`,
    link: 'https://projecteuler.net/problem=5',
    title: 'Smallest multiple'
  },
  {
    function: `function sumSquareDifference(n: number): number {\n
      let sumOfSquares = 0;\n
      let squareOfSums = 0;\n
      for (let i = 1; i <= n; i++) {\n
          sumOfSquares += Math.pow(i, 2);\n
          squareOfSums += i;\n
      }\n
      squareOfSums = Math.pow(squareOfSums, 2);\n
      return squareOfSums - sumOfSquares;\n
    }`,
    comment: `function that finds the difference between the sum of the squares of the first n natural numbers and the square of the sum of the first n natural numbers`,
    number: 6,
    difficulty: 5,
    statement: `The sum of the squares of the first ten natural numbers is,\n
    $$1^2 + 2^2 + ... + 10^2 = 385$$\n
    The square of the sum of the first ten natural numbers is,\n
    $$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$\n
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.\n
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n`,
    thoughts: `Another fun little mathematical problem being solved by crawling up the list of numbers, I wonder if there's a way to do this in a more efficient way.`,
    link: 'https://projecteuler.net/problem=6',
    title: 'Sum square difference'
  },
  {
    function: `function nthPrime(n:number):number {\n
      let primes = [2];\n
      let i = 3;\n
      while (primes.length < n) {\n
          if (isPrime(i)) {\n
              primes.push(i);\n
          }\n
          i += 2;\n
      }\n
      return primes[primes.length - 1];\n
    }\n
    \n
    // function that determines if a number is prime\n
    \n
    function isPrime(n:number):boolean {\n
      for (let i = 2; i < n; i++) {\n
          if (n % i === 0) {\n
              return false;\n
          }\n
      }\n
      return true;\n
    }\n`,
    comment: `function that finds the nth prime number`,
    number: 7,
    difficulty: 5,
    statement: `By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n
    What is the 10 001st prime number?\n`,
    thoughts: `Prime numbers are a bit boring, there's no series relationship going on so doesn't feel like there's a more efficient way, but maybe there is as we're iterating from 2 to the number in question each time checking for primeness.`,
    link: 'https://projecteuler.net/problem=7',
    title: '10001st prime'
  },
  {
    function: `function largestProduct(n: number, number: number): number {\n
      let largest = 0;\n
      let numberString = number.toString();\n
      for (let i = 0; i < numberString.length - n + 1; i++) {\n
        let product = 1;\n
        for (let j = 0; j < n; j++) {\n
          product *= numberString[i + j] as number;\n
        }\n
        if (product > largest) {\n
          largest = product;\n
        }\n
      }\n
      return largest;\n
    }\n`,
    comment: `// function that finds the sume of the primes below a given number with the lowest O(n) time complexity`,
    number: 8,
    difficulty: 5,
    statement: `The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n
\n
    73167176531330624919225119674426574742355349194934\n
    96983520312774506326239578318016984801869478851843\n
    85861560789112949495459501737958331952853208805511\n
    12540698747158523863050715693290963295227443043557\n
    66896648950445244523161731856403098711121722383113\n
    62229893423380308135336276614282806444486645238749\n
    30358907296290491560440772390713810515859307960866\n
    70172427121883998797908792274921901699720888093776\n
    65727333001053367881220235421809751254540594752243\n
    52584907711670556013604839586446706324415722155397\n
    53697817977846174064955149290862569321978468622482\n
    83972241375657056057490261407972968652414535100474\n
    82166370484403199890008895243450658541227588666881\n
    16427171479924442928230863465674813919123162824586\n
    17866458359124566529476545682848912883142607690042\n
    24219022671055626321111109370544217506941658960408\n
    07198403850962455444362981230987879927244284909188\n
    84580156166097919133875499200524063689912560717606\n
    05886116467109405077541002256983155200055935729725\n
    71636269561882670428252483600823257530420752963450\n
    \n
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product\n`,
    thoughts: `this one required a little bit of legwork from me as I had to parse the above into an easy to use string for the function to work with. Bit of a shame copilot didn't maintain the product value by dividing by number[j - n] and multiplying by number[j] to find the next product, so points lost there for increasing complexity!`,
    link: `https://projecteuler.net/problem=8`,
    title: `Largest product in a series`
  },
  {
    function: `function pythagoreanTriplet(n) {\n
      for (let a = 1; a < n; a++) {\n
          for (let b = a + 1; b < n; b++) {\n
              for (let c = b + 1; c < n; c++) {\n
                  if (a + b + c === n && a * a + b * b === c * c) {\n
                      return a * b * c;\n
                  }\n
              }\n
          }\n
      }\n
  }\n`,
    comment: `// function  that finds the product of a pythagorean triplet where a + b + c = n`,
    number: 9,
    difficulty: 5,
    statement: `A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n
    \n
    a2 + b2 = c2\n
    For example, 32 + 42 = 9 + 16 = 25 = 52.\n
    \n
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n
    Find the product abc.\n`,
    thoughts: `this is probably the first problem that I looked at and didn't know where to start myself, it's only problem 9 but I would probably need an hour or two working on it to solve it, so fair play copilot for getting it done in less than 30 seconds.`,
    link: `https://projecteuler.net/problem=9`,
    title: `Special Pythagorean triplet`
  },
  {
    function: `function sumPrimes(num:number):number {\n
      let sum = 0;\n
      const sieve = [];\n
      const primes = [];\n
      // create a sieve of size num\n
      for (let i = 0; i < num; i++) {\n
          sieve[i] = true;\n
      }\n
      // mark all multiples of primes as non-primes\n
      for (let i = 2; i < num; i++) {\n
          if (sieve[i]) {\n
              for (let j = i * i; j < num; j += i) {\n
                  sieve[j] = false;\n
              }\n
          }\n
      }\n
      // get all primes\n
      for (let i = 2; i < num; i++) {\n
          if (sieve[i]) {\n
              primes.push(i);\n
          }\n
      }\n
      // add all primes to sum\n
      for (let i = 0; i < primes.length; i++) {\n
          sum += primes[i];\n
      }\n
      return sum;\n
    }\n`,
    comment: `// function that finds the sum of the primes below a given number with the lowest O(n) time complexity`,
    number: 10,
    difficulty: 5,
    statement: `The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n
    \n
    Find the sum of all the primes below two million.\n`,
    thoughts: `this is the second iteration of this solution, as the first was doing the simple number crawling I complained about earlier, but took 10 minutes + `,
    link: `https://projecteuler.net/problem=10`,
    title: `Summation of primes`
  },
  {
    function: `function problemEleven(grid: number[][]): number {
      let greatestProduct = 0;
      for (let i = 0; i < grid.length; i++) {
          for (let j = 0; j < grid[i].length; j++) {
              let temp = grid[i][j];
              let product = 1;
              // check up
              if (i > 2) {
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i - k][j];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
              // check down
              if (i < grid.length - 3) {
                  product = 1;
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i + k][j];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
              // check left
              if (j > 2) {
                  product = 1;
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i][j - k];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
              // check right
              if (j < grid[i].length - 3) {
                  product = 1;
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i][j + k];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
              // check diagonal right
              if (i > 2 && j < grid[i].length - 3) {
                  product = 1;
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i - k][j + k];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
              // check diagonal left
              if (i > 2 && j > 2) {
                  product = 1;
                  for (let k = 0; k < 4; k++) {
                      product *= grid[i - k][j - k];
                  }
                  if (product > greatestProduct) {
                      greatestProduct = product;
                  }
              }
          }
      }
      return greatestProduct;
  }`,
    comment: `// function that finds the largest product of 4 adjacent numbers in the same direction (up, down, left, right, or diagonally) in a 20 by 20 grid`,
    number: 11,
    difficulty: 5,
    statement: `In the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n
    \n
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n
    \n
    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n
    \n
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?\n`,
    thoughts: `biggest trouble for me was putting these into a 2 dimensional array for the function to process - some might say copilot should've added something to parse the string into a 2d array but to me the real problem was finding the largest product of the 4 adjacent numbers, not parsing a string.`,
    link: `https://projecteuler.net/problem=11`,
    title: `Largest product in a grid`,
  },
  {
    function: `function triangleNumber(n:number):number {\n
      let i:number = 1;\n
      while (true) {\n
          let tri:number = (i * (i + 1)) / 2;\n
          if (getNumDivisors(tri) > n) {\n
              return tri;\n
          }\n
          i++;\n
      }\n
  }\n
  \n
  const getNumDivisors = (n:number):number => {\n
      let i:number = 1;\n
      let count:number = 0;\n
      while (i * i <= n) {\n
          if (n % i === 0) {\n
              count++;\n
              if (i * i !== n) {\n
                  count++;\n
              }\n
          }\n
          i++;\n
      }\n
      return count;\n
  }\n`,
    comment: `// function that finds the smallest triangle number that has over n divisors`,
    number: 12,
    difficulty: 5,
    statement: `The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n
    \n
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n
    \n
    Let us list the factors of the first seven triangle numbers:\n
    \n
    1: 1\n
    3: 1,3\n
    6: 1,2,3,6\n
    10: 1,2,5,10\n
    15: 1,3,5,15\n
    21: 1,3,7,21\n
    28: 1,2,4,7,14,28\n
    We can see that 28 is the first triangle number to have over five divisors.\n
    \n
    What is the value of the first triangle number to have over five hundred divisors?\n`,
    thoughts: `didn't even think about this one, just let copilot do it with a simple prompt.`,
    link: `https://projecteuler.net/problem=11`,
    title: `Highly divisible triangular number`,
  },
];

export default eulerProblemsData;


